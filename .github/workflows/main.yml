name: 'Publish Linux Arm builds'

on:
  workflow_dispatch:
  push:
    branches:
      - release

jobs:
  build:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        arch: [aarch64]
        include:
          - arch: aarch64
            cpu: cortex-a72
            base_image: https://dietpi.com/downloads/images/DietPi_RPi-ARMv8-Bookworm.img.xz
            deb: arm64
            rpm: aarch64
            appimage: aarch64

    steps:
      - uses: actions/checkout@v3

      - name: Cache rust build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true

      - name: Build app
        uses: pguyot/arm-runner-action@v2.6.5
        with:
          base_image: ${{ matrix.base_image }}
          cpu: ${{ matrix.cpu }}
          bind_mount_repository: true
          image_additional_mb: 10240
          optimize_image: no
          #exit_on_fail: no
          commands: |
            # Prevent Rust from complaining about $HOME not matching eid home
            export HOME=/root

            # Workaround to CI worker being stuck on Updating crates.io index
            export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse

            # Install setup prerequisites
            apt-get update -y --allow-releaseinfo-change
            apt-get autoremove -y
            apt-get install -y --no-install-recommends --no-install-suggests curl libwebkit2gtk-4.1-dev build-essential libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf libfuse2 file
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            . "$HOME/.cargo/env"
            curl -fsSL https://deb.nodesource.com/setup_lts.x | bash
            apt-get install -y nodejs

            # Install frontend dependencies
            npm install

            # Build the application
            npm run tauri build -- --verbose

      - name: Get app version
        run: echo "APP_VERSION=$(jq -r .version src-tauri/tauri.conf.json)" >> $GITHUB_ENV
      - name: Determine file path
        id: set-path
        run: |
          if [ -d "${{ github.workspace }}/src-tauri/target/release/bundle/deb/" ]; then
            echo "path=${{ github.workspace }}/src-tauri/target/release/bundle/deb/car-head-unit_${{ env.APP_VERSION }}_${{ matrix.deb }}.deb" >> $GITHUB_OUTPUT
          elif [ -d "${{ github.workspace }}/src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/" ]; then
            echo "path=${{ github.workspace }}/src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/car-head-unit_${{ env.APP_VERSION }}_${{ matrix.deb }}.deb" >> $GITHUB_OUTPUT
          else
            fallback_path=$(find ${{ github.workspace }}/src-tauri/target -type f -name 'car-head-unit*.deb' -print -quit)
            echo "path=$fallback_path" >> $GITHUB_OUTPUT
          fi
      # TODO: Combine this with the basic workflow and upload the files to the Release.
      - name: Upload deb bundle
        uses: actions/upload-artifact@v4
        with:
          name: Debian Bundle
          path: ${{ steps.set-path.outputs.path }}

      - name: Upload appimage bundle
        uses: actions/upload-artifact@v4
        with:
          name: AppImage Bundle
          path: ${{ github.workspace }}/src-tauri/target/release/bundle/appimage/car-head-unit_${{ env.APP_VERSION }}_${{ matrix.appimage }}.AppImage

      - name: Upload appimage bundle TEST
        uses: actions/upload-artifact@v4
        with:
          name: AppImage Bundle
          path: ${{ github.workspace }}/src-tauri/aarch64-unknown-linux-gnu/release/bundle/appimage/car-head-unit_${{ env.APP_VERSION }}_${{ matrix.appimage }}.AppImage
